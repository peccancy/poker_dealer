// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type Error struct {
	Code    Code   `json:"code"`
	Message string `json:"message"`
}

type ServiceToken struct {
	Token string `json:"token"`
	Error *Error `json:"error"`
}

type Code string

const (
	CodeInternal       Code = "INTERNAL"
	CodeInvalidIDToken Code = "INVALID_ID_TOKEN"
	CodeUserDenied     Code = "USER_DENIED"
)

var AllCode = []Code{
	CodeInternal,
	CodeInvalidIDToken,
	CodeUserDenied,
}

func (e Code) IsValid() bool {
	switch e {
	case CodeInternal, CodeInvalidIDToken, CodeUserDenied:
		return true
	}
	return false
}

func (e Code) String() string {
	return string(e)
}

func (e *Code) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Code(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Code", str)
	}
	return nil
}

func (e Code) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
